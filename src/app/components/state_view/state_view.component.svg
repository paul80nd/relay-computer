<svg:g>
  <svg:rect x="0" y="0" width="237" height="241" class="bayBackground"/>
  <svg:g transform="scale(0.325 0.325) translate(5 5)">

    <!-- Memory Column Titles -->
    <g *ngFor="let idx of [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]">
      <text [attr.x]="85+(40*idx)" y="228" class="mem-row-label" text-anchor="middle">{{ idx | hex:"1" }}</text>
    </g>

    <!-- Memory Rows -->
    <g *ngFor="let idx of [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]">
      <text x="40" [attr.y]="258+(30*idx)" class="mem-row-label" text-anchor="middle">{{ ((offset/16) + idx) | hex:"3" }}</text>
      <g *ngFor="let sidx of [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]">
        <rect [attr.x]="65+(40*sidx)" [attr.y]="236+(30*idx)" [class.mem-pc]="offset + (idx*16) + sidx === computer.xBackplane.registerPC.pcAddress" width="40" height="30" fill="none" stroke="#999999" />
        <text [attr.x]="85+(40*sidx)" [attr.y]="258+(30*idx)" [class.mem-pc]="offset + (idx*16) + sidx === computer.xBackplane.registerPC.pcAddress" class="mem-cell-text" text-anchor="middle">{{ computer.yBackplane.memory.memoryArray[offset + (idx*16) + sidx] | hex:"2" }}</text>
      </g>
    </g>

    <path d="M 705 206 L 255 206" fill="none" stroke="#999999" stroke-miterlimit="10" stroke-dasharray="3 3" />
    <path d="M 705 236 L 705 206" fill="none" stroke="#999999" stroke-miterlimit="10" stroke-dasharray="3 3" />
    <path d="M 65 236 L 65 115" fill="none" stroke="#999999" stroke-miterlimit="10" stroke-dasharray="3 3" />
    <path d="M 255 206 L 225 185" fill="none" stroke="#999999" stroke-miterlimit="10" stroke-dasharray="3 3" />
    <path d="M 65 115 L 225 115" fill="none" stroke="#999999" stroke-miterlimit="10" stroke-dasharray="3 3" />
    <path d="M 225 185 L 225 115" fill="none" stroke="#999999" stroke-miterlimit="10" stroke-dasharray="3 3" />

    <!-- ALU Flags -->
    <g [class.alu-active]="computer.zBackplane.aluControl.condition.value.bit(snLine)">
      <rect x="265" y="145" width="45" height="39" fill="none" stroke="#999999" />
      <text x="288" y="174" class="alu-label" text-anchor="middle">S</text>
    </g>
    <g [class.alu-active]="computer.zBackplane.aluControl.condition.value.bit(cyLine)">
      <rect x="323" y="145" width="45" height="39" fill="none" stroke="#999999" />
      <text x="346" y="174" class="alu-label" text-anchor="middle">C</text>
    </g>
    <g [class.alu-active]="computer.zBackplane.aluControl.condition.value.bit(ezLine)">
      <rect x="380" y="145" width="45" height="39" fill="none" stroke="#999999" />
      <text x="403" y="174" class="alu-label" text-anchor="middle">Z</text>
    </g>

    <!-- 8-bit Registers -->
    <svg:g rc-register-view transform="translate(0,0)" [registerPart]="computer.zBackplane.registerAD.registerA.value" [registerName]="'A'"></svg:g>
    <svg:g rc-register-view transform="translate(40,0)" [registerPart]="computer.zBackplane.registerBC.registerB.value" [registerName]="'B'"></svg:g>
    <svg:g rc-register-view transform="translate(80,0)" [registerPart]="computer.zBackplane.registerBC.registerC.value" [registerName]="'C'"></svg:g>
    <svg:g rc-register-view transform="translate(120,0)" [registerPart]="computer.zBackplane.registerAD.registerD.value" [registerName]="'D'"></svg:g>
    <svg:g rc-register-view transform="translate(200,0)" [registerPart]="computer.yBackplane.registerM.register.valueHi" [registerName]="'M1'"></svg:g>
    <svg:g rc-register-view transform="translate(240,0)" [registerPart]="computer.yBackplane.registerM.register.valueLo" [registerName]="'M2'"></svg:g>
    <svg:g rc-register-view transform="translate(280,0)" [registerPart]="computer.yBackplane.registerXY.register.valueHi" [registerName]="'X'"></svg:g>
    <svg:g rc-register-view transform="translate(320,0)" [registerPart]="computer.yBackplane.registerXY.register.valueLo" [registerName]="'Y'"></svg:g>
    <svg:g rc-register-view transform="translate(360,0)" [registerPart]="computer.yBackplane.registerJ.register.valueHi" [registerName]="'J1'"></svg:g>
    <svg:g rc-register-view transform="translate(400,0)" [registerPart]="computer.yBackplane.registerJ.register.valueLo" [registerName]="'J2'"></svg:g>

    <!-- 16-bit Registers -->
    <rect x="625" y="134" width="80" height="25" fill="none" stroke="#999999" />
    <text x="665" y="153" class="register-value-int" text-anchor="middle">{{ (shift(computer.yBackplane.registerJ.register.valueHi.value.toUnsignedNumber()) + computer.yBackplane.registerJ.register.valueLo.value.toUnsignedNumber())  | dec:"4":false }}</text>
    <rect x="625" y="159" width="80" height="25" fill="none" stroke="#999999" />
    <text x="665" y="177" class="register-value-sint" text-anchor="middle">{{ (shift(computer.yBackplane.registerJ.register.valueHi.value.toUnsignedNumber()) + computer.yBackplane.registerJ.register.valueLo.value.toUnsignedNumber())  | dec:"4":true }}</text>
    <rect x="545" y="134" width="80" height="25" fill="none" stroke="#999999" />
    <text x="585" y="153" class="register-value-int" text-anchor="middle">{{ (shift(computer.yBackplane.registerXY.register.valueHi.value.toUnsignedNumber()) + computer.yBackplane.registerXY.register.valueLo.value.toUnsignedNumber())  | dec:"4":false }}</text>
    <rect x="545" y="159" width="80" height="25" fill="none" stroke="#999999" />
    <text x="585" y="177" class="register-value-sint" text-anchor="middle">{{ (shift(computer.yBackplane.registerXY.register.valueHi.value.toUnsignedNumber()) + computer.yBackplane.registerXY.register.valueLo.value.toUnsignedNumber())  | dec:"4":true }}</text>
    <rect x="465" y="134" width="80" height="25" fill="none" stroke="#999999" />
    <text x="505" y="153" class="register-value-int" text-anchor="middle">{{ (shift(computer.yBackplane.registerM.register.valueHi.value.toUnsignedNumber()) + computer.yBackplane.registerM.register.valueLo.value.toUnsignedNumber())  | dec:"4":false }}</text>
    <rect x="465" y="159" width="80" height="25" fill="none" stroke="#999999" />
    <text x="505" y="177" class="register-value-sint" text-anchor="middle">{{ (shift(computer.yBackplane.registerM.register.valueHi.value.toUnsignedNumber()) + computer.yBackplane.registerM.register.valueLo.value.toUnsignedNumber())  | dec:"4":true }}</text>

    <!-- Inst and PC -->
    <text x="105" y="39" class="register-label" text-anchor="middle">PC</text>
    <rect x="65" y="50" width="80" height="35" fill="none" stroke="#999999" />
    <text x="105" y="78" class="register-value-big" text-anchor="middle">{{ computer.xBackplane.registerPC.register.value.value.toUnsignedNumber() | hex:"4" }}</text>
    <text x="185" y="39" class="register-label" text-anchor="middle">INST</text>
    <rect x="145" y="50" width="80" height="35" fill="none" stroke="#999999" />
    <text x="185" y="78" class="register-value-big" text-anchor="middle">{{ computer.xBackplane.registerI.register.value.value.toUnsignedNumber() | hex:"2" }}</text>

    <!-- Memory Control -->
    <text x="77" y="143" fill="#e6e6e6" font-family="Helvetica" font-size="16px">Page</text>
    <g *ngIf="offset >= 256" (click)="prevPage()" class="clickable" transform="translate(0 -4)">
      <path d="M 126.25 132.09 L 136.25 140 L 126.25 147.92 Z" fill="#e6e6e6" stroke="#999999" stroke-miterlimit="10" transform="rotate(-180,131.25,140)" />
    </g>
    <text x="165" y="144" class="register-value" text-anchor="middle">{{ offset | hex:"4"}}</text>
    <g *ngIf="offset < 65280" (click)="nextPage()" class="clickable" transform="translate(0 -4)">
      <path d="M 193 132.09 L 203 140 L 193 147.92 Z" fill="#e6e6e6" stroke="#999999" stroke-miterlimit="10" />
    </g>

    <!--


    <g transform="translate(-0.5 -0.5)">
      <switch>
        <foreignObject width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;">
          <div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 43px; height: 1px; padding-top: 169px; margin-left: 77px;">
            <div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;">
              <div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;">
                <font color="#e6e6e6" style="font-size: 16px;">Disp</font>
              </div>
            </div>
          </div>
        </foreignObject>
        <text x="77" y="173" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">Disp</text>
      </switch>
    </g>
    <g transform="translate(-0.5 -0.5)">
      <switch>
        <foreignObject width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;">
          <div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 38px; height: 1px; padding-top: 170px; margin-left: 147px;">
            <div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;">
              <div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;">
                <font color="#e6e6e6" style="font-size: 16px;">Hex</font>
              </div>
            </div>
          </div>
        </foreignObject>
        <text x="147" y="174" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">Hex</text>
      </switch>
    </g>
    <g transform="translate(-0.5 -0.5)">
      <switch>
        <foreignObject width="100%" height="100%" requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility" style="overflow: visible; text-align: left;">
          <div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe flex-start; width: 38px; height: 1px; padding-top: 190px; margin-left: 147px;">
            <div data-drawio-colors="color: rgb(0, 0, 0); " style="box-sizing: border-box; font-size: 0px; text-align: left;">
              <div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: rgb(0, 0, 0); line-height: 1.2; pointer-events: none; white-space: normal; overflow-wrap: normal;">
                <font color="#e6e6e6" style="font-size: 16px;">UInt</font>
              </div>
            </div>
          </div>
        </foreignObject>
        <text x="147" y="194" fill="rgb(0, 0, 0)" font-family="Helvetica" font-size="12px">UInt</text>
      </switch>
    </g>
    <ellipse cx="131.25" cy="170" rx="8" ry="8" fill="#e6e6e6" stroke="#999999" />
    <ellipse cx="131.25" cy="190" rx="8" ry="8" fill="none" stroke="#999999" />
  </g>
  <switch>
    <g requiredFeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/>
    <a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank">
      <text text-anchor="middle" font-size="10px" x="50%" y="100%">Text is not SVG - cannot display</text>
    </a>
  </switch>
  -->
  </svg:g>
